def getInput():
    n,m,k=map(int, raw_input().strip().split(' '))
    grid=[[(1*(g=='A'))+(2*(g=='%'))+(3*(g=='#'))+(4*(g=='*')) for g in list(raw_input().strip())] for _i in range(n)]
    tunnels=[[(i1-1,j1-1),(i2-1,j2-1)]for i1, j1, i2, j2 in [map(int, raw_input().strip().split(' ')) for _i in range(k)]]
    graph=dict()
    startpt=None
    idxctr=0
    indexMap=dict()
    winStates=[]
    lossStates=[]
    for i in range(n):
        for j in range(m):
            if grid[i][j]==1:
                startpt=(i,j)
            graph[(i,j)]=[grid[i][j],[]]
            sealed=True
            if grid[i][j] < 3:
                if i > 0:  #check above
                    if grid[i-1][j] <> 3:
                        sealed=False
                        graph[(i,j)][1].append((i-1,j))
                if i < (n-1): #check below
                    if grid[i+1][j] <> 3:
                        sealed=False
                        graph[(i,j)][1].append((i+1,j))
                if j > 0:
                    if grid[i][j-1] <> 3:
                        sealed=False
                        graph[(i,j)][1].append((i,j-1))
                if j < (m-1):
                    if grid[i][j+1] <> 3:
                        sealed=False
                        graph[(i,j)][1].append((i,j+1))
                if sealed==True:
                    graph[(i,j)][0]=4
    for t in tunnels:
        paths_to_a=[c for c in graph.keys() if t[0] in graph[c][1]]
        paths_to_b=[c for c in graph.keys() if t[1] in graph[c][1]]
        for p in paths_to_a:
            _d=graph[p][1].pop(graph[p][1].index(t[0]))
            graph[p][1].append(t[1])
        for p in paths_to_b:
            _d=graph[p][1].pop(graph[p][1].index(t[1]))
            graph[p][1].append(t[0])
    for s in graph.keys():
        if graph[s][0]<2:
            indexMap[s]=idxctr
            idxctr+=1
        else:
            if graph[s][0] == 2:
                winStates.append(s)
            else:
                lossStates.append(s)
    for s in winStates:
        indexMap[s]=idxctr
        idxctr+=1
    for s in lossStates:
        indexMap[s]=idxctr
        idxctr+=1
    P=[[0 for _i in range(len(graph.keys()))] for _j in range(len(graph.keys()))]
    for s in indexMap.keys():
        if graph[s][0]<2:
            if len(graph[s][1])>0:
                p=1.0/len(graph[s][1])
            else:
                p=0
            for d in graph[s][1]:
                P[indexMap[s]][indexMap[d]]=p
        else:
            P[indexMap[s]][indexMap[s]]=1
    t=len(winStates)+len(lossStates)
    r=idxctr-t
    Q=[[P[i][j] for j in range(r)] for i in range(r)]
    R=[[P[i][j+r] for j in range(t)] for i in range(r)]
    I=[[0+(1*(_j==_i)) for _j in range(len(Q))] for _i in range(len(Q))]
    return [startpt, P, Q, R, I, indexMap, winStates, lossStates]

def matrixSubtract(a,b):
    return [[a[i][j]-b[i][j] for j in range(len(a))] for i in range(len(a))]

def matrixMultiply(a,b):
    result,b=[],zip(*b)
    n,m=len(a),len(b)
    for i in xrange(n):
        curr_row=[]
        for j in xrange(m):
            total=0
            for ele_a,ele_b in zip(a[i],b[j]):
                total+=ele_a*ele_b
            curr_row.append(total)
        result.append(curr_row)
    return result

def LUPDecompose(A, N, Tol):
    temp = [list(A[i]) for i in range(N)]
    A=temp
    b=[A[i][N-1] for i in range(N)]
    P=range(N+1)
    for i in range(N):
        maxA=0.0
        imax=i
        for k in range(i,N):
            absA=abs(A[k][i])
            if absA > maxA:
                maxA = absA
                imax=k
        if maxA < Tol:
            return [(i,maxA, [A[k][i] for k in range(i,N)])]
        if imax <> i:
            j=P[i]
            P[i]=P[imax]
            P[imax]=j
            ptr=A[i]
            A[i]=A[imax]
            A[imax]=ptr
            P[N]+=1
        for j in range(i+1,N):
            if A[i][i]<>0:
                A[j][i] /= A[i][i]
            for k in range(i+1,N):
                A[j][k] -= A[j][i] * A[i][k]
    return A,P,b

def LUPInvert(A,P,N):
    IA=[[None]*N for i in range(N)]
    for j in range(N):
        for i in range(N):
            if P[i] == j:
                IA[i][j]=1.0
            else:
                IA[i][j]=0.0
            for k in range(i):
                if A[i][k]<>0 and IA[k][j]<>0:
                    IA[i][j] -= A[i][k] * IA[k][j]
        #for i in range(N)[::-1]:
        for i in range(N-1, -1, -1):
            for k in range(i+1, N):
                if A[i][k]<>0 and IA[k][j]<>0:
                    IA[i][j] -= A[i][k] * IA[k][j]
            if A[i][i]<>0:
                IA[i][j] = IA[i][j] / A[i][i]
    return IA

def solve():
    startpt, P, Q, R, I, indexMap, winStates, lossStates = getInput()
    if len(winStates)>0:
        if len(lossStates)>0:
            M=matrixSubtract(I,Q)
            result=LUPDecompose(M,len(M),0)
            if len(result)>0:
                lupA,lupP,lupb = result
                N=LUPInvert(lupA,lupP,len(lupA))
                B=matrixMultiply(N,R)
                print sum(B[indexMap[startpt]][:len(winStates)])
            else:
                print 0
        else:
            print 1
    else:
        print 0

solve()
